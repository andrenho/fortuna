; Multiply two values
;  A:  first value (small one)
;  DE: second value (large one)
;  result = AHL

mult_a_de:
	ld	c, 0
	ld	h, c
	ld	l, h

	add	a, a		; optimised 1st iteration
	jr	nc, $+4
	ld	h,d
	ld	l,e

	ld b, 7
.loop:
	add	hl, hl
	rla
	jr	nc, $+4
	add	hl, de
	adc	a, c            ; yes this is actually adc a, 0 but since c is free we set it to zero and so we can save 1 byte and up to 3 T-states per iteration

	djnz	.loop

	ret

; Multiply two values
;  BC: first value
;  DE: second value
;  result = DEHL

mult_de_bc:
	ld	hl, 0

	sla	e		; optimised 1st iteration
	rl	d
	jr	nc, $+4
	ld	h, b
	ld	l, c

	ld	a, 15
.loop:
	add	hl, hl
	rl	e
	rl	d
	jr	nc, $+6
	add	hl, bc
	jr	nc, $+3
	inc	de

	dec	a
	jr	nz, .loop

	ret
 
; Divide two values
;  HL/C = HL  (reminder in A)

div_hl_c:
        xor	a
        ld	b, 16

.loop:
        add	hl, hl
        rla
        jr	c, $+5
        cp	c
        jr	c, $+4

        sub	c
        inc	l

        djnz	.loop

        ret

; code gotten from
;  - https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Division
;  - https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Multiplication

; vim: ts=8:sts=8:sw=8:expandtab
